
import 'dart:async';

import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

//This file is automatically generated. DO NOT EDIT, all your changes would be lost.

class S implements WidgetsLocalizations {
  const S();

  static const GeneratedLocalizationsDelegate delegate =
      const GeneratedLocalizationsDelegate();

  static S of(BuildContext context) =>
      Localizations.of<S>(context, WidgetsLocalizations);

  @override
  TextDirection get textDirection => TextDirection.ltr;

  String get about_author => "about";
  String get account => "account";
  String get amber => "amber";
  String get animation_example => "animation";
  String get blue => "blue";
  String get blue_grey => "blueGrey";
  String get brown => "brown";
  String get cancel => "cancel";
  String get checkinput => "check input!";
  String get click => "ok";
  String get click_load_more => "ClickMore";
  String get click_login => "click login";
  String get deep_orange => "deepOrange";
  String get dialog_widget => "dialogWidget";
  String get form_option => "inputWidget";
  String get home_bottom_men_btn => "home";
  String get home_title => "play Android";
  String get inputAccount => "input account";
  String get inputPassWord => "input paassword";
  String get input_content_count => "Please enter the user name in the correct format!";
  String get input_content_pwd => "Please enter the password in the correct format!";
  String get isLoginOut => "Are you sure you want to log out?";
  String get knowledge => "knowledge structure";
  String get knowledge_bottom_men_btn => "knowledge structure";
  String get language => "chinese";
  String get layout_example => "layout_widget";
  String get login => "login";
  String get my_likes => "my likes";
  String get net_work_select_widget => "loading...";
  String get now_into => "Now in to";
  String get often_ui_widget => "OftenUiWidget";
  String get out_login => "logout";
  String get password => "password";
  String get pink => "pink";
  String get progress_widget => "progressWidget";
  String get read => "read";
  String get recommend_infomation => "information";
  String get register => "register";
  String get register_ok => "register ok!";
  String get route_widget => "route";
  String get select_widget => "selectWidget";
  String get sqflite => "sqflite data base";
  String get submission => "submission";
  String get sure_outlogin => " Are you sure you want to quit app? ";
  String get switch_language => "switch language";
  String get switch_rxdart => "rxDart example";
  String get switch_theme => "switch theme";
  String get teal => "teal";
}

class en extends S {
  const en();
}

class zh extends S {
  const zh();

   @override
  TextDirection get textDirection => TextDirection.ltr;

  @override
  String get cancel => "取消";
  @override
  String get deep_orange => "橘黄色";
  @override
  String get pink => "少女粉";
  @override
  String get switch_rxdart => "RxDart的使用";
  @override
  String get input_content_count => "请输入正确格式的用户名!";
  @override
  String get language => "english";
  @override
  String get blue_grey => "蓝灰色";
  @override
  String get layout_example => "布局控件";
  @override
  String get login => "登录";
  @override
  String get home_title => "玩Android";
  @override
  String get input_content_pwd => "请输入正确格式的密码!";
  @override
  String get out_login => "退出登录";
  @override
  String get password => "密码";
  @override
  String get click_load_more => "点击加载更多";
  @override
  String get knowledge_bottom_men_btn => "知识体系";
  @override
  String get my_likes => "我喜欢的";
  @override
  String get form_option => "输入控件";
  @override
  String get route_widget => "路由";
  @override
  String get about_author => "关于";
  @override
  String get inputAccount => "输入用户名";
  @override
  String get knowledge => "知识体系";
  @override
  String get register_ok => "注册成功";
  @override
  String get often_ui_widget => "Widget实验室";
  @override
  String get read => "红色";
  @override
  String get sqflite => "sqflite数据库";
  @override
  String get isLoginOut => "确定要退出登录吗?";
  @override
  String get switch_language => "切换语言";
  @override
  String get checkinput => "请检查输入内容!";
  @override
  String get recommend_infomation => "精选文章";
  @override
  String get teal => "绿色";
  @override
  String get amber => "琥珀黄";
  @override
  String get brown => "棕色";
  @override
  String get inputPassWord => "输入密码";
  @override
  String get click => "确定";
  @override
  String get progress_widget => "进度控件";
  @override
  String get dialog_widget => "弹框控件";
  @override
  String get net_work_select_widget => "加载中...";
  @override
  String get animation_example => "动画";
  @override
  String get sure_outlogin => "确定退出APP吗?";
  @override
  String get switch_theme => "切换主题";
  @override
  String get blue => "蓝色";
  @override
  String get now_into => "立即进入";
  @override
  String get submission => "提交";
  @override
  String get select_widget => "选项控件";
  @override
  String get click_login => "点击登录";
  @override
  String get home_bottom_men_btn => "首页";
  @override
  String get account => "用户名";
  @override
  String get register => "注册";
}


class GeneratedLocalizationsDelegate extends LocalizationsDelegate<WidgetsLocalizations> {
  const GeneratedLocalizationsDelegate();

  List<Locale> get supportedLocales {
    return const <Locale>[

      const Locale("en", ""),
      const Locale("zh", ""),

    ];
  }

  LocaleResolutionCallback resolution({Locale fallback}) {
    return (Locale locale, Iterable<Locale> supported) {
      final Locale languageLocale = new Locale(locale.languageCode, "");
      if (supported.contains(locale))
        return locale;
      else if (supported.contains(languageLocale))
        return languageLocale;
      else {
        final Locale fallbackLocale = fallback ?? supported.first;
        return fallbackLocale;
      }
    };
  }

  @override
  Future<WidgetsLocalizations> load(Locale locale) {
    final String lang = getLang(locale);
    switch (lang) {

      case "en":
        return new SynchronousFuture<WidgetsLocalizations>(const en());
      case "zh":
        return new SynchronousFuture<WidgetsLocalizations>(const zh());

      default:
        return new SynchronousFuture<WidgetsLocalizations>(const S());
    }
  }

  @override
  bool isSupported(Locale locale) => supportedLocales.contains(locale);

  @override
  bool shouldReload(GeneratedLocalizationsDelegate old) => false;
}

String getLang(Locale l) => l.countryCode != null && l.countryCode.isEmpty
    ? l.languageCode
    : l.toString();
